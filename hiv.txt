Добавление новой вкладки в Настройках (через webpack и bundle.js):
1. Создаём нужный компонент в react/components/settings по примерам, которые уже есть и работают.
2. Добавляем новую вкладку с компонентом в react/components/SettingPage.jsx
3. Прописываем нужные функции (actions) в react/actions/setting-action.js
4. Прописываем роуты для этих actions в src/application/config/routes.php
5. Создаём необходимые контроллеры/методы, методы в моделях.
6. Прописываем нужные константы в react/actions/action-types.js
7. Прописываем действия по нужным константам в редьюсере react/reducers/config-reducer.js
8. Долбаемся с ошибками пол-дня, пока всё настроим/отладим.
9. PROFIT!!!
-------------

Команда создания нового bundle.js:
webpack (выполнить в корневой директории проекта)

-------------

Редактирование CSS:
1. Редактируем стили в /src/public/css/assol.css
2. В консоли запускаем: $(npm bin)/gulp css  (!!! именно с $ в начале команды !!!)
3. Получаем новый скомпилированный файл стилей /src/public/build/assol.min.css
4. PROFIT!!!
-------------

Статусы ssd:
0 - default
1 – в очереди
2 - на утверждение
3 - подтверждено
--------

Получить скомпилированный select-запрос:
log_message('error', $this->db()->get_compiled_select());

--------------

Sortable table:
0. для таблицы указываем  class="tablesorter"!
на странице подключить скрипты и стили:
<script src="/public/tablesorter/jquery.tablesorter.min.js"></script>
<link rel="stylesheet" href="/public/tablesorter/blue/style.css">
1. если таблица формируется при помощи js - то код вызова сортировки нужно прописывать в конец функции, которая заполняет таблицу данными
2. если таблица формируется при помощи php - то код вызова сортировки нужно прописывать после формирования таблицы
3. код вызова сортировки:
$("#ReportIndividualDaily_data").tablesorter({
    selectorHeaders: 'thead th.sortable' // <-- здесь указываем класс, который определяет те столбцы, по которым будет работать сортировка
});

--------------