<?php
defined('BASEPATH') OR exit('No direct script access allowed');

/**
 * Модель для работы с справочниками
 */
class References_model extends MY_Model {

    private $table = "CREATE TABLE IF NOT EXISTS `assol_references` (
                          `ID` INT(11) NOT NULL AUTO_INCREMENT COMMENT 'Уникальный номер записи',
                          `ReferenceKey` VARCHAR(64) NOT NULL COMMENT 'Ключ справочника',
                          `ReferenceValue` VARCHAR(128) NOT NULL COMMENT 'Значение справочника',
                          PRIMARY KEY (`ID`)
                      ) ENGINE=MyISAM DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 COMMENT='Справочники';";

    private $references = array(
        'FORMING' => array(
            '101' => 'Высшее',
            '102' => 'Среднее',
            '103' => 'Неполное высшее'
        ),
        'FORMING_FORM' => array(
            '151' => 'Заочная',
            '152' => 'Стационар'
        ),
        'MARITAL' => array(
            '201' => 'Не замужем',
            '202' => 'Встречается',
            '203' => 'Помолвлен(-а)',
            '204' => 'В браке',
            '205' => 'В гражданском браке',
            '206' => 'В домашнем партнерстве',
            '207' => 'В свободных отношениях',
            '208' => 'Все сложно',
            '209' => 'Раздельное проживание',
            '210' => 'В разводе',
            '211' => 'Вдовец/вдова'
        ),
        'EYE_COLOR' => array(
            '301' => 'Синий',
            '302' => 'Голубой',
            '303' => 'Серый',
            '304' => 'Зелёный',
            '305' => 'Янтарный',
            '306' => 'Болотный',
            '307' => 'Карий',
            '308' => 'Чёрный',
            '309' => 'Жёлтый'
        ),
        'LANGUAGE' => array(
            '401' => 'Азербайджанский',
            '402' => 'Албанский',
            '403' => 'Английский',
            '404' => 'Арабский',
            '405' => 'Армянский',
            '406' => 'Африкаанс',
            '407' => 'Баскский',
            '408' => 'Белорусский',
            '409' => 'Бенгальский',
            '410' => 'Бирманский',
            '411' => 'Болгарский',
            '412' => 'Боснийский',
            '413' => 'Валлийский',
            '414' => 'Венгерский',
            '415' => 'Вьетнамский',
            '416' => 'Галисийский',
            '417' => 'Греческий',
            '418' => 'Грузинский',
            '419' => 'Гуджарати',
            '420' => 'Датский',
            '421' => 'Зулу',
            '422' => 'Иврит',
            '423' => 'Игбо',
            '424' => 'Идиш',
            '425' => 'Индонезийский',
            '426' => 'Ирландский',
            '427' => 'Исландский',
            '428' => 'Испанский',
            '429' => 'Итальянский',
            '430' => 'Йоруба',
            '431' => 'Казахский',
            '432' => 'Каннада',
            '433' => 'Каталанский',
            '434' => 'Китайский',
            '435' => 'Корейский',
            '436' => 'Креольский (Гаити)',
            '437' => 'Кхмерский',
            '438' => 'Лаосский',
            '439' => 'Латынь',
            '440' => 'Латышский',
            '441' => 'Литовский',
            '442' => 'Македонский',
            '443' => 'Малагасийский',
            '444' => 'Малайский',
            '445' => 'Малайялам',
            '446' => 'Мальтийский',
            '447' => 'Маори',
            '448' => 'Маратхи',
            '449' => 'Монгольский',
            '450' => 'Немецкий',
            '451' => 'Непали',
            '452' => 'Нидерландский',
            '453' => 'Норвежский',
            '454' => 'Панджаби',
            '455' => 'Персидский',
            '456' => 'Польский',
            '457' => 'Португальский',
            '458' => 'Румынский',
            '459' => 'Русский',
            '460' => 'Себуанский',
            '461' => 'Сербский',
            '462' => 'Сесото',
            '463' => 'Сингальский',
            '464' => 'Словацкий',
            '465' => 'Словенский',
            '466' => 'Сомали',
            '467' => 'Суахили',
            '468' => 'Суданский',
            '469' => 'Тагальский',
            '470' => 'Таджикский',
            '471' => 'Тайский',
            '472' => 'Тамильский',
            '473' => 'Телугу',
            '474' => 'Турецкий',
            '475' => 'Узбекский',
            '476' => 'Украинский',
            '477' => 'Урду',
            '478' => 'Финский',
            '479' => 'Французский',
            '480' => 'Хауса',
            '481' => 'Хинди',
            '482' => 'Хмонг',
            '483' => 'Хорватский',
            '484' => 'Чева',
            '485' => 'Чешский',
            '486' => 'Шведский',
            '487' => 'Эсперанто',
            '488' => 'Эстонский',
            '489' => 'Яванский',
            '490' => 'Японский'
        ),
        'CHILD_SEX' => array(
            '501' => 'Мальчик',
            '502' => 'Девочка'
        ),
        'BODY_BUILD' => array(
            '601' => 'Атлетическое',
            '602' => 'Привлекательное',
            '603' => 'Пышное',
            '604' => 'Среднее',
            '605' => 'Стройное'
        ),
        'USER_ROLE' => array(
            '10001' => 'Директор',
            '10002' => 'Секретарь',
            '10003' => 'Переводчик',
            '10004' => 'Сотрудник'
        )
    );

    /**
     * Инициализация таблицы
     */
    public function initDataBase() {
        $this->db()->query($this->table);

        // Инициализация первичного списка
        if (!$this->db()->count_all('assol_references')) {
            foreach($this->references as $name => $data)
                foreach($data as $id => $value)
                    $this->db()->insert('assol_references', array(
                        'ID' => $id,
                        'ReferenceKey' => $name,
                        'ReferenceValue' => $value,
                    ));
        }
    }

    public function dropTables() {
        $this->load->dbforge();

//        $this->dbforge->drop_table(self::TABLE_CUSTOMER_NAME, TRUE);
    }

    /**
     * Получиние записей для указанного справочника
     *
     * @param int $referenceName имя запрашиваемого справочника
     *
     * @return mixed
     */
    public function getReference($referenceName) {
        return $this->db()->get_where('assol_references', array('ReferenceKey' => $referenceName))->result_array();
    }

}